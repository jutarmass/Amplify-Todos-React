{"version":3,"sources":["graphql/mutations.js","graphql/queries.js","aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["createTodo","listTodos","awsmobile","Amplify","configure","awsExports","initialState","name","description","styles","container","width","margin","display","flex","flexDirection","justifyContent","padding","todo","marginBottom","input","border","backgroundColor","fontSize","todoName","fontWeight","todoDescription","button","color","outline","App","useState","formState","setFormState","todos","setTodos","setInput","key","value","a","API","graphql","graphqlOperation","todoData","data","items","console","log","useEffect","fetchTodos","style","onChange","event","target","placeholder","onClick","map","index","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kVAGaA,EAAU,0PCWVC,EAAS,8TCFPC,EATG,CACd,mBAAsB,iBACtB,4BAA+B,sFAC/B,mBAAsB,iBACtB,+BAAkC,UAClC,mBAAsB,kCCD1BC,UAAQC,UAAUC,GAElB,IAAMC,EAAe,CAAEC,KAAM,GAAIC,YAAa,IA8DxCC,EAAS,CACbC,UAAW,CAAEC,MAAO,IAAKC,OAAQ,SAAUC,QAAS,OAAQC,KAAM,EAAGC,cAAe,SAAUC,eAAgB,SAAUC,QAAS,IACjIC,KAAM,CAAGC,aAAc,IACvBC,MAAO,CAAEC,OAAQ,OAAQC,gBAAiB,OAAQH,aAAc,GAAIF,QAAS,EAAGM,SAAU,IAC1FC,SAAU,CAAED,SAAU,GAAIE,WAAY,QACtCC,gBAAiB,CAAEP,aAAc,GACjCQ,OAAQ,CAAEL,gBAAiB,QAASM,MAAO,QAASC,QAAS,OAAQN,SAAU,GAAIN,QAAS,aAG/Ea,EArEH,WAAO,IAAD,EACkBC,mBAASzB,GAD3B,mBACT0B,EADS,KACEC,EADF,OAEUF,mBAAS,IAFnB,mBAETG,EAFS,KAEFC,EAFE,KAQhB,SAASC,EAASC,EAAKC,GACrBL,EAAa,2BAAKD,GAAN,kBAAkBK,EAAMC,KATtB,4CAYhB,8BAAAC,EAAA,+EAE2BC,IAAIC,QAAQC,YAAiBzC,IAFxD,OAEU0C,EAFV,OAGUT,EAAQS,EAASC,KAAK3C,UAAU4C,MACtCV,EAASD,GAJb,gDAKkBY,QAAQC,IAAI,wBAL9B,0DAZgB,kEAoBhB,4BAAAR,EAAA,kEAESP,EAAUzB,MAASyB,EAAUxB,YAFtC,wDAGUU,EAHV,eAGsBc,GAClBG,EAAS,GAAD,mBAAKD,GAAL,CAAYhB,KACpBe,EAAa3B,GALjB,SAMUkC,IAAIC,QAAQC,YAAiB1C,EAAY,CAACoB,MAAOF,KAN3D,yDAQI4B,QAAQC,IAAI,uBAAZ,MARJ,2DApBgB,sBAgChB,OA5BAC,qBAAU,YAJM,mCAKdC,KACC,IA2BD,yBAAKC,MAAOzC,EAAOC,WACjB,6CACA,2BACEyC,SAAU,SAAAC,GAAK,OAAIhB,EAAS,OAAQgB,EAAMC,OAAOf,QACjDY,MAAOzC,EAAOW,MACdkB,MAAON,EAAUzB,KACjB+C,YAAY,SAEd,2BACEH,SAAU,SAAAC,GAAK,OAAIhB,EAAS,cAAegB,EAAMC,OAAOf,QACxDY,MAAOzC,EAAOW,MACdkB,MAAON,EAAUxB,YACjB8C,YAAY,gBAEd,4BAAQJ,MAAOzC,EAAOkB,OAAQ4B,QA/ClB,4CA+CZ,eAEErB,EAAMsB,KAAI,SAACtC,EAAMuC,GAAP,OACR,yBAAKpB,IAAKnB,EAAKwC,GAAKxC,EAAKwC,GAAKD,EAAOP,MAAOzC,EAAOS,MACjD,uBAAGgC,MAAOzC,EAAOe,UAAWN,EAAKX,MACjC,uBAAG2C,MAAOzC,EAAOiB,iBAAkBR,EAAKV,mBCnDhCmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.9a1b1a2b.chunk.js","sourcesContent":["/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createTodo = /* GraphQL */ `\n  mutation CreateTodo(\n    $input: CreateTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    createTodo(input: $input, condition: $condition) {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateTodo = /* GraphQL */ `\n  mutation UpdateTodo(\n    $input: UpdateTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    updateTodo(input: $input, condition: $condition) {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteTodo = /* GraphQL */ `\n  mutation DeleteTodo(\n    $input: DeleteTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    deleteTodo(input: $input, condition: $condition) {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getTodo = /* GraphQL */ `\n  query GetTodo($id: ID!) {\n    getTodo(id: $id) {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listTodos = /* GraphQL */ `\n  query ListTodos(\n    $filter: ModelTodoFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listTodos(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        description\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-southeast-1\",\n    \"aws_appsync_graphqlEndpoint\": \"https://5ui3z6yff5g3fbes4vhodin3ga.appsync-api.ap-southeast-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"ap-southeast-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-ddc3ki5lbvhbdmtqfvmvl4nkq4\"\n};\n\n\nexport default awsmobile;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\nimport { createTodo } from './graphql/mutations';\nimport { listTodos } from './graphql/queries';\nimport awsExports from \"./aws-exports\";\nAmplify.configure(awsExports);\n\nconst initialState = { name: '', description: '' }\n\nconst App = () => {\n  const [formState, setFormState] = useState(initialState)\n  const [todos, setTodos] = useState([])\n\n  useEffect(() => {\n    fetchTodos()\n  }, []);\n\n  function setInput(key, value) {\n    setFormState({ ...formState, [key]: value })\n  }\n\n  async function fetchTodos() {\n    try {\n      const todoData = await API.graphql(graphqlOperation(listTodos))\n      const todos = todoData.data.listTodos.items\n      setTodos(todos)\n    } catch (err) { console.log('error fetching todos') }\n  }\n\n  async function addTodo() {\n    try {\n      if (!formState.name || !formState.description) return\n      const todo = { ...formState }\n      setTodos([...todos, todo])\n      setFormState(initialState)\n      await API.graphql(graphqlOperation(createTodo, {input: todo}))\n    } catch (err) {\n      console.log('error creating todo:', err)\n    }\n  }\n\n  return (\n    <div style={styles.container}>\n      <h2>Amplify Todos</h2>\n      <input\n        onChange={event => setInput('name', event.target.value)}\n        style={styles.input}\n        value={formState.name} \n        placeholder=\"Name\"\n      />\n      <input\n        onChange={event => setInput('description', event.target.value)}\n        style={styles.input}\n        value={formState.description}\n        placeholder=\"Description\"\n      />\n      <button style={styles.button} onClick={addTodo}>Create Todo</button>\n      {\n        todos.map((todo, index) => (\n          <div key={todo.id ? todo.id : index} style={styles.todo}>\n            <p style={styles.todoName}>{todo.name}</p>\n            <p style={styles.todoDescription}>{todo.description}</p>\n          </div>\n        ))\n      }\n    </div>\n  );\n}\n\nconst styles = {\n  container: { width: 400, margin: '0 auto', display: 'flex', flex: 1, flexDirection: 'column', justifyContent: 'center', padding: 20 },\n  todo: {  marginBottom: 15 },\n  input: { border: 'none', backgroundColor: '#ddd', marginBottom: 10, padding: 8, fontSize: 18 },\n  todoName: { fontSize: 20, fontWeight: 'bold' },\n  todoDescription: { marginBottom: 0 },\n  button: { backgroundColor: 'black', color: 'white', outline: 'none', fontSize: 18, padding: '12px 0px' }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}